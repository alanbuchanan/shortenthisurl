{"version":3,"sources":["src/server/controllers/link.js","src/server/index.js","src/server/models/link.js","src/server/server.js","src/server/test/test.js"],"names":[],"mappings":"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","file":"script.compiled.js","sourcesContent":["import express from 'express';\nconst app = express();\nimport mongoose from 'mongoose';\nimport _ from 'lodash';\n\n// How can I do the following LinkSchema with ES6 import/export?\nconst LinkSchema = require('../models/link');\n\nconst Link = mongoose.model('links', LinkSchema);\n\nconst thisurl = 'https://shortenthisurl.herokuapp.com/';\n// const thisurl = 'http://localhost:3000/';\n\nexport default class {\n\n    handlePost(req, res){\n        let url = req.url.substr(5);\n        const urlCheck = /[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/;\n\n        if(url.substr(0, 4) !== 'http'){\n            url = 'http://' + url;\n        }\n\n        if(urlCheck.test(url)) {\n\n            const getRandomStr = (length) => {\n                const alphanumeric = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('')\n                return _.times(length, () => _.sample(alphanumeric)).join('');\n            }\n\n            // Post\n            Link.findOne({ name: url}, function (err, doc){\n                if (err) return console.log(err);\n\n                const code = getRandomStr(4);\n\n                if (!doc) {\n                    // URL doesn't exist in db, so create it\n                    Link.create({code: code, name: url}, (err, link) => {\n                        if (err) return (console.log(err));\n                        Link.findOne({code: code}, (err, doc) => {\n                            if (err) return (console.log(err));\n                            return res.send({shortUrl: thisurl + doc.code, originalUrl: doc.name});\n                        })\n                    });\n                } else {\n                    // URL exists in db, so send that info\n                    Link.findOne({name: url}, (err, doc) => {\n                        if (err) return (console.log(err));\n                        return res.send({shortUrl: thisurl + doc.code, originalUrl: doc.name});\n                    })\n                }\n            });\n\n        } else {\n            res.send({error: 'invalid url'});\n        }\n\n    }\n\n    handleUrlReq(req, res){\n        const code = req.url.substr(1);\n\n        Link.findOne({code: code}, (err, doc) => {\n            if (doc) {\n                res.redirect(doc.name);\n            } else {\n                res.send({error: 'No short URL found'});\n            }\n        });\n    }\n\n    handleRoot(req, res){\n        res.sendFile('./views/index.html');\n    }\n\n    deleteEntry(req, res){\n        Link.remove({code: req.url.substr(1)}, result => {\n            res.send(result);\n        });\n    }\n\n};\n","require('babel-core/register');\nrequire('./server.js');","var mongoose = require('mongoose');\n\nvar Schema = mongoose.Schema;\n\nvar LinkSchema = new Schema({\n\tname: String,\n\tcode: String\n});\n\nmodule.exports = LinkSchema;","import express from 'express';\nconst app = express();\nimport mongoose from 'mongoose';\nimport path from 'path';\n\nimport LinkMethodsClass from './controllers/link';\nconst LinkMethods = new LinkMethodsClass;\n\nconst port = process.env.PORT || 3000;\n\nconst mongoURI = 'mongodb://127.0.0.1:27017/shortenthisurl';\nmongoose.connect(process.env.MONGOLAB_URI || mongoURI, err => {if (err) console.log(err)});\n\napp.use(express.static(path.join(__dirname, './views')));\napp.get('/', LinkMethods.handleRoot);\napp.get('/new/:url*', LinkMethods.handlePost);\napp.get(/^\\/(.+)/, LinkMethods.handleUrlReq);\napp.delete('/:code', LinkMethods.deleteEntry);\n\napp.listen(port, () => {\n\tconsole.log('Listening on ' + port);\n});","import {expect} from 'chai';\nvar request = require('request');\nvar burl = 'http://localhost:3000/';\n\ndescribe('URL shortener', () => {\n\n    it('should return an error object when a non existant url code is passed', done => {\n        request(burl + 'gibberishh', (error, response, body) => {\n            expect(JSON.parse(body).error).to.be.equal(\"No short URL found\");\n            expect(JSON.parse(body)).to.be.an('object');\n            done();\n        });\n    });\n\n    it('should return a json object from the db when an existant url is passed to /new', done => {\n        request(burl + 'new/bbc.net', (error, response, body) => {\n            expect(JSON.parse(body).shortUrl).to.be.equal('http://localhost:3000/GMEN');    \n            done();\n        });\n    });\n})\n\n// These tests pass 2 - 4 times and then fail."]}